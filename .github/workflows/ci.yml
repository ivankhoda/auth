# This workflow uses actions that are not certified by GitHub.  They are
# provided by a third-party and are governed by separate terms of service,
# privacy policy, and support documentation.
#
# This workflow will install a prebuilt Ruby version, install dependencies, and
# run tests and linters.
name: "Ruby on Rails CI"
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
jobs:
  test:
    runs-on: ubuntu-latest
    container:
      image: ivankhoda/auth-app:latest
      credentials:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    services:
      db:
        image: postgres:15.2
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: auth
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: install PostgreSQL client
        run: apt-get install libpq-dev

      - name: run bundle install
        run: bundle install --jobs=8 --path vendor/bundle
        
      - name: Setup Database
        env:
          RAILS_ENV: test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_PORT: 5432
          POSTGRES_DB: auth
        run: |
            bundle exec rake db:create
            bundle exec rake db:schema:load
        

#       - name: Build and create DB
#         env:
#           POSTGRES_HOST: 127.0.0.1
#           POSTGRES_USER: postgres
#           POSTGRES_PORT: ${{ job.services.postgres.ports[5432] }} # get randomly assigned published port
#           POSTGRES_PASSWORD: password
#           RAILS_ENV: test
#         run: |
#           gem install bundler
#           bundle install --jobs 4 --retry 3
#           bin/rails db:setup

#

#       - name: Create DB
#         run: |
#           RAILS_ENV=test bundle exec rake parallel:create


#       - name: Run load from schema
#         run: RAILS_ENV=test bundle exec rake parallel:rake[db:schema:load]

#       - name: Run migrate DB
#         run: RAILS_ENV=test bundle exec rake parallel:migrate

#       - name: Run create tmp DB
#         run: RAILS_ENV=test bundle exec rake tmp:create

#       - name: Run Rubocop
#         run: bundle exec rubocop -c .rubocopignorebuild.yml

#       - name: Run rspec
#         run: COVERAGE=true RAILS_ENV=test bundle exec parallel_rspec ./spec

#       - name: Stash Coverage Results
#         run: |
#           mkdir coverage_results
#           cp -R coverage/.resultset.json coverage_results/.resultset-0.json

#       - name: Run report_coverage
#         run: RAILS_ENV=test bundle exec rake simplecov:report_coverage

#       - name: Save coverage
#         uses: actions/upload-artifact@v3
#         if: success() || failure()
#         with:
#           name: coverage
#           path: ./coverage
